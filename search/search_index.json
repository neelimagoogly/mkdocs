{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"pagination/","text":"pagination get_pages_nav ( total_pages , current_page ) Generate navigation links for pagination. Parameters: Name Type Description Default total_pages int Total number of pages. required current_page int The current page number. required Returns: Type Description tuple [ int , int ] tuple[int, int]: A tuple containing the next page number and previous page number. Source code in src\\pagination.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_pages_nav ( total_pages : int , current_page : int ) -> tuple [ int , int ]: \"\"\" Generate navigation links for pagination. Args: total_pages (int): Total number of pages. current_page (int): The current page number. Returns: tuple[int, int]: A tuple containing the next page number and previous page number. \"\"\" next_page = None prev_page = None if current_page + 1 <= total_pages : next_page = current_page + 1 if current_page - 1 >= 1 : prev_page = current_page - 1 return next_page , prev_page paginate_data ( data , page_no , page_size , total_content ) Paginate a list of data. Parameters: Name Type Description Default data List [ dict ] The list of data to be paginated. required page_no int The current page number. required page_size int The number of items per page. required total_content int The total number of items. required Returns: Type Description dict [ str , any ] dict[str, any]: A dictionary containing pagination information and paginated data. Source code in src\\pagination.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def paginate_data ( data : List [ dict ], page_no : int , page_size : int , total_content : int ) -> dict [ str , any ]: \"\"\" Paginate a list of data. Args: data (List[dict]): The list of data to be paginated. page_no (int): The current page number. page_size (int): The number of items per page. total_content (int): The total number of items. Returns: dict[str, any]: A dictionary containing pagination information and paginated data. \"\"\" total_pages = math . ceil ( total_content / page_size ) next_page , prev_page = get_pages_nav ( total_pages , page_no ) return { \"count\" : total_content , \"next_page\" : next_page , \"prev_page\" : prev_page , \"results\" : data , }","title":"pagination"},{"location":"pagination/#pagination","text":"","title":"pagination"},{"location":"pagination/#src.pagination.get_pages_nav","text":"Generate navigation links for pagination. Parameters: Name Type Description Default total_pages int Total number of pages. required current_page int The current page number. required Returns: Type Description tuple [ int , int ] tuple[int, int]: A tuple containing the next page number and previous page number. Source code in src\\pagination.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 def get_pages_nav ( total_pages : int , current_page : int ) -> tuple [ int , int ]: \"\"\" Generate navigation links for pagination. Args: total_pages (int): Total number of pages. current_page (int): The current page number. Returns: tuple[int, int]: A tuple containing the next page number and previous page number. \"\"\" next_page = None prev_page = None if current_page + 1 <= total_pages : next_page = current_page + 1 if current_page - 1 >= 1 : prev_page = current_page - 1 return next_page , prev_page","title":"get_pages_nav()"},{"location":"pagination/#src.pagination.paginate_data","text":"Paginate a list of data. Parameters: Name Type Description Default data List [ dict ] The list of data to be paginated. required page_no int The current page number. required page_size int The number of items per page. required total_content int The total number of items. required Returns: Type Description dict [ str , any ] dict[str, any]: A dictionary containing pagination information and paginated data. Source code in src\\pagination.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def paginate_data ( data : List [ dict ], page_no : int , page_size : int , total_content : int ) -> dict [ str , any ]: \"\"\" Paginate a list of data. Args: data (List[dict]): The list of data to be paginated. page_no (int): The current page number. page_size (int): The number of items per page. total_content (int): The total number of items. Returns: dict[str, any]: A dictionary containing pagination information and paginated data. \"\"\" total_pages = math . ceil ( total_content / page_size ) next_page , prev_page = get_pages_nav ( total_pages , page_no ) return { \"count\" : total_content , \"next_page\" : next_page , \"prev_page\" : prev_page , \"results\" : data , }","title":"paginate_data()"}]}